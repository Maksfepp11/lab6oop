#ifndef EQUATION_SOLVER_H
#define EQUATION_SOLVER_H

#include <functional> // Для використання std::function

class EquationSolver { // Клас для розв'язання рівнянь методом дихотомії та методом Ньютона
public:// це модифікатор доступу,   всі методи та змінні, оголошені після нього, будуть доступні для використання поза класом(в будь якому іншому місці програми)
    
    EquationSolver();// Конструктор класу. Ініціалізує об'єкт класу. але немає параметрів, тому може   ініціалізувати початок
    ~EquationSolver();// Деструктор класу. Очищає ресурси (якщо необхідно).

    void setInterval(double vol_a, double vol_b); // Метод для встановлення проміжку для пошуку кореня
    // vol_a - початкова точка проміжку, vol_b - кінцева точка проміжку
    
    void setTolerance(double vol_eps);// Метод для встановлення точності  для методів розв'язання
    // vol_eps - точність, з якою потрібно знайти корінь
    
    // Методи, що використовують лямбда-вирази
    int bisection(std::function<double(double)> func, double &x); //це функціональний параметр, який приймає функцію func з одним double-аргументом і повертає double.
    int newton(std::function<double(double)> func, std::function<double(double)> deriv, double &x); //це параметр який приймає функцію і похідну з double-аргументами і повертає doubl

private: //private — це модифікатор доступу,  Це дозволяє захистити дані та методи від сторонніх змін.
double a, b, eps; // Змінні для зберігання значень проміжку і точності
};

#endif
